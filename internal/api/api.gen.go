// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "cdd-go-boilerplate/internal/entity"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dummy/sample)
	DummyEndpoint(ctx echo.Context, params DummyEndpointParams) error

	// (POST /dummy/sample)
	DummyEndpointPost(ctx echo.Context) error

	// (GET /healthcheck)
	HealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DummyEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) DummyEndpoint(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DummyEndpointParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DummyEndpoint(ctx, params)
	return err
}

// DummyEndpointPost converts echo context to params.
func (w *ServerInterfaceWrapper) DummyEndpointPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DummyEndpointPost(ctx)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dummy/sample", wrapper.DummyEndpoint)
	router.POST(baseURL+"/dummy/sample", wrapper.DummyEndpointPost)
	router.GET(baseURL+"/healthcheck", wrapper.HealthCheck)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVQVPbTAz9Kx5939GJTZNefCstTDkww8CR4aB4lXjB3l125Qwp4//eke3gAKaBFnrq",
	"KY73We9pJT3dQ24rZw0ZDpDdg6fgrAnU/pmnqfzk1jAZlkd0rtQ5srYmuQ7WyLuQF1ShPP3vaQkZ/JcM",
	"MZPuNCRH3lsPTdPEoCjkXjsJAhksUEWebmsKHFEHimGeHnw8c22w5sJ6/YPULvXs46mX1i+0UmQ6xvnH",
	"MxrL0dLWZifTz3+jvNoweYNlhE5PAvk1+UFBqPOcQng3FYcY6KKPOdpqgaKeM9p2OgiuDyDxd2Nk9+C8",
	"deRZU69SkfzyxhFkENhrs5JMFLKoa2KoKARcjaGaGKTRtScF2WUXa8D3Ma7i7Wd2cU05S/Ducl8vhpRm",
	"4Xg4WlhbErbNRn2sP1LaE4xpLQhLLr4WlN+cb2/4mfIOtBlT+IR6i3xOJUhtllaCPC7zIZqb6Bw3GJ2R",
	"D1aa71gbNDlFp2hwRT66IL/WOUVfzk4ghlLn1Os0WAmJ83qNTJIQay7lVRfw+BRiWJMPHVU6TacHgrKO",
	"DDoNGcym6TSFGBxy0SabqLqqNknAypUtx4raNpcLaZv8REEG3wR0ZJSz2nD7uceKmHyA7PJphm1DRO2F",
	"yCVABrc1+Q3EW/390TA1z3rkbmJlIqW0KzITumOPE8ZVK3mNpVaSfzYUo2mu4sfr4VPnH2MD+YBLtiPe",
	"+twr8AIaFsA+7MGOY+/Dzna8dh92vuOPv8YKqO1FZ8O+sp4JpOtvCnxo1eZNzvd4hrqKPq3sbxW2GR2u",
	"YQzZ19T8K/6LxW9iSDqjysX3Xpzx74M3wvh1vssWHLPgkW14sQlMVaRDtDXZt6Yti7Pd6J1H1b6EDApm",
	"lyVJaXMsCxs4m6UCv2p+BgAA//+L/VzQawoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
